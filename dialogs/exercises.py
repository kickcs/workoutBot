from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import (ScrollingGroup, Back, SwitchTo,
                                        Select, Group, Start, Button)
from aiogram_dialog.widgets.text import Const, Format, Jinja
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog import ChatEvent

from aiogram.types import ContentType, Message, CallbackQuery
from aiogram import F
from typing import Any

from . import states
from db.requests import ExerciseRepository
from db.exercises_list import workout_plan


async def name_handler(message: Message, message_input: MessageInput,
                       manager: DialogManager):
    if manager.is_preview():
        await manager.next()
        return
    manager.dialog_data['exercise_name'] = message.text
    await manager.next()


async def other_type_handler(message: Message, message_input: MessageInput,
                             manager: DialogManager):
    await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ!\n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')


async def exercise_type_handler(callback: ChatEvent, select: Any,
                                manager: DialogManager, item_id: str):
    manager.dialog_data['exercise_type'] = item_id
    await ExerciseRepository.add_exercise(tg_id=manager.event.from_user.id,
                                          name=manager.dialog_data['exercise_name'],
                                          exercise_type=manager.dialog_data['exercise_type'])
    await manager.switch_to(state=states.Exercises.MAIN)


async def getter(dialog_manager: DialogManager, **_kwargs):
    exercises = await ExerciseRepository.list_exercises(tg_id=dialog_manager.event.from_user.id)
    return {'exercises': exercises}


async def on_exercise_selected(callback: CallbackQuery, widget: Any,
                               manager: DialogManager, selected_item: str):
    await callback.answer(selected_item)


async def on_edited_exercise_selected(callback: CallbackQuery, widget: Any,
                                      manager: DialogManager, selected_item: int):
    await ExerciseRepository.delete_exercise(tg_id=manager.event.from_user.id,
                                             exercise_id=selected_item)


async def default_exercises_getter(dialog_manager: DialogManager, **_kwargs):
    tg_id = dialog_manager.middleware_data['event_from_user'].id
    exercises = await ExerciseRepository.get_available_exercises(tg_id=tg_id)
    if exercises:
        return {'trains': False}
    return {'trains': True, 'workout_plan': workout_plan}


async def add_default_exercises_selected(callback: CallbackQuery, button: Button,
                                         manager: DialogManager):
    await ExerciseRepository.add_default_exercises(tg_id=manager.event.from_user.id, workout_plan=workout_plan)
    await manager.switch_to(state=states.Exercises.MAIN)


# region main window + add window
main_window = Window(
    Const('–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏'),
    Const('\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –º–µ–Ω—é "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"', when=F['trains']),
    SwitchTo(Const('–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'), id='add_exercise', state=states.Exercises.ADD_NAME),
    SwitchTo(Const('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'), id='edit_exercise', state=states.Exercises.EDIT),
    SwitchTo(Const('–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'), id='list_exercises', state=states.Exercises.LIST),
    SwitchTo(Const('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'),
             id='default_exercise',
             state=states.Exercises.DEFAULT_EXERCISE,
             when=F['trains']),
    Start(text=Const('–ù–∞–∑–∞–¥'), id="__main__", state=states.Main.MAIN),
    getter=default_exercises_getter,
    state=states.Exercises.MAIN
)
add_name_window = Window(
    Const('üèãÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b>\n\n'
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n'
          'üî§ <i>–ü—Ä–∏–º–µ—Ä</i>: –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n\n'
          '–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è, —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –º—ã—à—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.'
          ),
    MessageInput(name_handler, content_types=[ContentType.TEXT]),
    MessageInput(other_type_handler),
    SwitchTo(text=Const('–ù–∞–∑–∞–¥'), id='back', state=states.Exercises.MAIN),
    state=states.Exercises.ADD_NAME
)
add_type_window = Window(
    Const('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:'),
    Group(Select(
        Format("{item}"),
        items=['–ì—Ä—É–¥—å', '–°–ø–∏–Ω–∞', '–ü–ª–µ—á–∏', '–ù–æ–≥–∏', '–†—É–∫–∏', '–ü—Ä–æ—á–µ–µ'],
        item_id_getter=lambda item: item,
        id='exercise_type',
        on_click=exercise_type_handler
    ), width=2),
    Back(text=Const('–ù–∞–∑–∞–¥'), id='back'),
    state=states.Exercises.ADD_TYPE,
)
# endregion

list_exercises_window = Window(
    Const('–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'),
    ScrollingGroup(Select(
        Format("{item.name} | ({item.type})"),
        id="s_exercises",
        item_id_getter=lambda item: item.id,
        items='exercises',
        on_click=on_exercise_selected
    ), width=1, height=8, id='list_exercises'),
    Back(text=Const('–ù–∞–∑–∞–¥'), id='back'),
    state=states.Exercises.LIST,
    getter=getter,
)

edit_exercise_window = Window(
    Const('üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</b>\n\n'
          '–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n'
          '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ—Ç–µ—Ä–µ –≤—Å–µ–≥–æ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!'),
    ScrollingGroup(Select(
        Format("{item.name} | ({item.type})"),
        id="s_exercises",
        item_id_getter=lambda item: item.id,
        items='exercises',
        on_click=on_edited_exercise_selected
    ), width=1, height=8, id='list_exercises'),
    SwitchTo(text=Const('–ù–∞–∑–∞–¥'), id='back', state=states.Exercises.MAIN),
    state=states.Exercises.EDIT,
    getter=getter,
)

default_exercises_window = Window(
    Jinja("""
<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è‚Äç‚ôÄÔ∏è</b>
{% for muscle_group, exercises in workout_plan.items() %}
<b>‚û°Ô∏è {{ muscle_group }}:</b>
<blockquote>{% for exercise in exercises %}
  ‚Ä¢ {{ exercise }}
{% endfor %}</blockquote>
{% if not loop.last %}
{% endif %}
{% endfor %}
    """),
    Button(text=Const('–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'), id='ex_add', on_click=add_default_exercises_selected),
    SwitchTo(text=Const('–ù–∞–∑–∞–¥'), id='back', state=states.Exercises.MAIN),
    state=states.Exercises.DEFAULT_EXERCISE,
    getter=default_exercises_getter
)

exercises_dialog = Dialog(
    main_window,
    list_exercises_window,
    add_name_window,
    add_type_window,
    edit_exercise_window,
    default_exercises_window
)
