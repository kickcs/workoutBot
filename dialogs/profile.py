from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Start, Back, Select, SwitchTo, ScrollingGroup
from aiogram_dialog.widgets.text import Const, Jinja
from aiogram.types import CallbackQuery

from db.requests import ProfileRepository
import operator
from . import states
from typing import Any
from collections import defaultdict


async def group_trains_by_exercise(trains):
    grouped = {}
    for train in trains:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ 4 –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–º–µ–Ω–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (Exercises.name)
        key = train[4]
        if key not in grouped:
            grouped[key] = []
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        grouped[key].append(train)
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –ø–æ set_number (–∏–Ω–¥–µ–∫—Å 1)
    for key in grouped:
        grouped[key] = sorted(grouped[key], key=lambda x: x[1])
    return grouped


async def profile_trains_getter(dialog_manager: DialogManager, **_kwargs):
    tg_id = dialog_manager.event.from_user.id
    trains = await ProfileRepository.get_date_trains_profile(tg_id=tg_id)
    return {'trains': trains}


async def on_profile_trains_selected(callback: CallbackQuery, widget: Any,
                                     manager: DialogManager, selected_item: int):
    manager.dialog_data['selected_train'] = selected_item
    await manager.next()


async def profile_trains_data_getter(dialog_manager: DialogManager, **_kwargs):
    selected_train = dialog_manager.dialog_data['selected_train']
    tg_id = dialog_manager.event.from_user.id
    trains = await ProfileRepository.get_train_profile(tg_id, selected_train)
    grouped_trains = await group_trains_by_exercise(trains)
    return {'grouped_trains': grouped_trains}


main_profile_window = Window(
    Const('üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n'
          '–í –¥–∞–Ω–Ω–æ–º –æ–∫–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∞—Ç–∞–º.'),
    Start(Const('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'), id='trains', state=states.Profile.TRAINS),
    # Start(Const('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'), id='exercises', state=states.Profile.EXERCISES),
    Start(Const('–ù–∞–∑–∞–¥'), id='__main__', state=states.Main.MAIN),
    state=states.Profile.MAIN
)

trains_profile_window = Window(
    Const('üìÖ <b>–î–∞—Ç—ã –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n'),
    ScrollingGroup(Select(
        Jinja("{{ item.date.strftime('%d-%m-%Y - %A') | capitalize }}"),
        id='date',
        item_id_getter=operator.itemgetter(0),
        items='trains',
        on_click=on_profile_trains_selected
    ), width=1, height=8, id='list_trains'),
    Back(Const('–ù–∞–∑–∞–¥')),
    state=states.Profile.TRAINS,
    getter=profile_trains_getter
)

trains_data_profile_window = Window(
    Jinja("""
{% for exercise, details in grouped_trains.items() %}
üîπ <b>{{ exercise }}</b>
<blockquote>{% for train in details %}
   - –ü–æ–¥—Ö–æ–¥ {{ train.set_number }}: {{ train.reps }}x{{ train.weight }} –∫–≥
{% endfor %}</blockquote>
{% endfor %}
    """),
    Back(Const('–ù–∞–∑–∞–¥')),
    state=states.Profile.TRAINS_INFO,
    getter=profile_trains_data_getter
)

exercises_profile_window = Window(
    Const('–í –¥–∞–Ω–Ω–æ–º –æ–∫–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n'),
    SwitchTo(Const('–ù–∞–∑–∞–¥'), id='back', state=states.Profile.MAIN),
    state=states.Profile.EXERCISES
)

profile_dialog = Dialog(
    main_profile_window,
    trains_profile_window,
    trains_data_profile_window,
)
