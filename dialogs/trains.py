from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import (Back, Select, Start, Column, Button)
from aiogram_dialog.widgets.text import Const, Format, Jinja
from aiogram_dialog.widgets.input import MessageInput

from aiogram.types import Message, CallbackQuery, ContentType
from aiogram import F
import asyncio
from typing import Any
from datetime import datetime
import operator

from . import states
from db.requests import ExerciseRepository, TrainRepository


async def generate_approaches(number: int, exercises: dict | None, exercise_id: str):
    """Generates list of approaches"""
    approaches = []

    if exercises is None:
        for i in range(1, number + 1):
            approaches.append((f'–ü–æ–¥—Ö–æ–¥ {i}', i, None, None))
    else:
        exercise_sets = exercises.get(exercise_id, [])

        for i in range(1, number + 1):
            found_set = next((set_info for set_info in exercise_sets if int(set_info['set_number']) == i), None)

            if found_set:
                approaches.append((f'–ü–æ–¥—Ö–æ–¥ {i}', i, found_set['reps'], found_set['weight']))
            else:
                approaches.append((f'–ü–æ–¥—Ö–æ–¥ {i}', i, None, None))

    return approaches


async def exercise_types_getter(dialog_manager: DialogManager, **_kwargs):
    exercise_types = await ExerciseRepository.get_exercise_types(tg_id=dialog_manager.event.from_user.id)
    if dialog_manager.dialog_data.get('exercises'):
        return {'exercise_type': exercise_types, 'end_train': True}
    return {'exercise_type': exercise_types}


async def on_exercise_type_selected(callback: CallbackQuery, widget: Any,
                                    manager: DialogManager, selected_item: str):
    manager.dialog_data['exercise_type'] = selected_item
    await manager.next()


async def exercise_by_type_getter(dialog_manager: DialogManager, **_kwargs):
    exercises = await ExerciseRepository.get_exercises_by_type(tg_id=dialog_manager.event.from_user.id,
                                                               exercise_type=dialog_manager.dialog_data[
                                                                   'exercise_type'])
    return {'exercises': exercises, }


async def on_exercise_selected(callback: CallbackQuery, widget: Any,
                               manager: DialogManager, selected_item: str):
    manager.dialog_data['exercise_id'] = selected_item
    await manager.next()


async def exercise_set_getter(dialog_manager: DialogManager, **_kwargs):
    exercise_id = dialog_manager.dialog_data['exercise_id']
    exercise_name = await ExerciseRepository.get_exercise_name(tg_id=dialog_manager.event.from_user.id,
                                                               exercise_id=exercise_id)
    exercise_sets = dialog_manager.current_context().dialog_data.get('exercise_sets', {})

    sets_count = exercise_sets.get(dialog_manager.dialog_data['exercise_id'], 0)
    sets = await generate_approaches(sets_count, dialog_manager.dialog_data.get('exercises'),
                                     exercise_id)

    previous_sets = await TrainRepository.get_trains_by_id(train_id=exercise_id)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞—Ç

    unique_dates = set()
    unique_dates = set(train.date for train in previous_sets)

    return {'exercise_name': exercise_name, 'sets': sets, 'previous_sets': previous_sets,
            'unique_dates': unique_dates}


async def on_button_selected(callback: CallbackQuery, widget: Button, manager: DialogManager):
    exercise_id = str(manager.current_context().dialog_data['exercise_id'])
    exercise_sets = manager.current_context().dialog_data.setdefault('exercise_sets', {})

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è 'exercises', –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if 'exercises' not in manager.dialog_data:
        manager.dialog_data['exercises'] = {}

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    current_exercise = manager.dialog_data['exercises'].get(exercise_id, [])

    # –ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if widget.widget_id == 'add_set':
        exercise_sets[exercise_id] = exercise_sets.get(exercise_id, 0) + 1
    elif widget.widget_id == 'delete_set':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–¥—Ö–æ–¥–µ
        if len(current_exercise) < exercise_sets.get(exercise_id, 0):
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—Ö–æ–¥ –Ω–µ –∏–º–µ–µ—Ç –¥–µ—Ç–∞–ª–µ–π
            exercise_sets[exercise_id] = max(0, exercise_sets.get(exercise_id, 0) - 1)
        elif current_exercise:
            # –£–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
            current_exercise.pop(-1)

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥–æ–≤, —É–¥–∞–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        if not current_exercise and exercise_sets.get(exercise_id, 0) == 0:
            manager.dialog_data['exercises'].pop(exercise_id, None)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ dialog_data
    if current_exercise:
        manager.dialog_data['exercises'][exercise_id] = current_exercise
    elif exercise_id in manager.dialog_data['exercises']:
        manager.dialog_data['exercises'].pop(exercise_id)

    manager.current_context().dialog_data['exercise_sets'] = exercise_sets


async def on_exercise_sets_selected(callback: CallbackQuery, widget: Any,
                                    manager: DialogManager, selected_item: int):
    manager.dialog_data['set_number'] = selected_item
    exercise_id = manager.current_context().dialog_data['exercise_id']
    if 'exercises' not in manager.dialog_data:
        manager.dialog_data['exercises'] = {}
    if exercise_id not in manager.dialog_data['exercises']:
        manager.dialog_data['exercises'][exercise_id] = []

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ callback
    if not any(set_info['set_number'] == selected_item for set_info in manager.dialog_data['exercises'][exercise_id]):
        new_set = {
            'set_number': selected_item,
            'reps': None,
            'weight': None
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–¥—Ö–æ–¥–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ exercise_id
        manager.dialog_data['exercises'][exercise_id].append(new_set)

    await manager.next()


async def exercise_name_getter(dialog_manager: DialogManager, **_kwargs):
    exercise_name = await ExerciseRepository.get_exercise_name(tg_id=dialog_manager.event.from_user.id,
                                                               exercise_id=dialog_manager.dialog_data['exercise_id'])
    return {'exercise_name': exercise_name}


async def count_reps_set(message: Message, message_input: MessageInput,
                         manager: DialogManager):
    exercise_id = manager.current_context().dialog_data['exercise_id']

    if manager.is_preview():
        await manager.next()
        return

    current_set_number = manager.current_context().dialog_data['set_number']

    for set_detail in manager.dialog_data['exercises'][exercise_id]:
        if set_detail['set_number'] == current_set_number:
            set_detail['reps'] = message.text
            break

    await manager.next()


async def count_weight_set(message: Message, message_input: MessageInput,
                           manager: DialogManager):
    exercise_id = manager.current_context().dialog_data['exercise_id']

    if manager.is_preview():
        await manager.next()
        return

    current_set_number = manager.current_context().dialog_data['set_number']

    for set_detail in manager.dialog_data['exercises'][exercise_id]:
        if set_detail['set_number'] == current_set_number:
            set_detail['weight'] = message.text
            break

    await manager.switch_to(state=states.Trains.SETS)


async def other_type_handler(message: Message, message_input: MessageInput,
                             manager: DialogManager):
    await message.answer('‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n'
                         'üî¢ –í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª!')


async def end_trains(callback: CallbackQuery, widget: Button, manager: DialogManager):
    data = manager.dialog_data['exercises']
    tasks = []

    for exercise_id, sets in data.items():
        for set_info in sets:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è reps –∏ weight –Ω–µ —Ä–∞–≤–Ω—ã None
            if set_info['reps'] is not None and set_info['weight'] is not None:
                # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ create_train
                task = TrainRepository.create_train(
                    exercise_id=exercise_id,
                    ex_type='normal',
                    set_number=set_info['set_number'],
                    reps=set_info['reps'],
                    weight=set_info['weight'],
                    date=datetime.now().strftime('%Y-%m-%d')
                )
                tasks.append(task)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if tasks:
        await asyncio.gather(*tasks)

    await callback.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
    await manager.done()
    await manager.switch_to(state=states.Main.MAIN)


# region first_windows
window_type_select = Window(
    Const('üëã <b>–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –º—ã—à—Ü</b>\n\n'
          '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n'
          '–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü, —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. '),
    Column(Select(
        Format("{item}"),
        id='exercise_type',
        item_id_getter=lambda item: item,
        items='exercise_type',
        on_click=on_exercise_type_selected,
    )),
    Button(text=Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'),
           id='finish',
           on_click=end_trains,
           when=F['end_train']),
    Start(text=Const('–ù–∞–∑–∞–¥'), id="__main__", state=states.Main.MAIN),
    state=states.Trains.MAIN,
    getter=exercise_types_getter
)

window_exercise_select = Window(
    Const('üèãÔ∏è <b>–í—ã–±–æ—Ä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è </b>\n\n'
          '–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.'),
    Column(Select(
        Format("{item.name}"),
        id='s_exercises',
        item_id_getter=lambda item: item.id,
        items='exercises',
        on_click=on_exercise_selected
    )),
    Back(text=Const('–ù–∞–∑–∞–¥')),
    getter=exercise_by_type_getter,
    state=states.Trains.LIST
)

# endregion
window_exercise_set_select = Window(
    Jinja('''
<b>üèãÔ∏è –¢–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {{ exercise_name }}\n
{% if previous_sets %}
<b>üìÖ –ü—Ä–æ—à–ª—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>
{% for date in unique_dates %}
\n<b>üóìÔ∏è –î–∞—Ç–∞:</b> {{ date.strftime('%A, %d-%m-%Y') }}
{% for train_set in previous_sets %}
{% if train_set.date == date %}
   - {{ train_set.set_number }}: {{ train_set.reps }}—Ö{{ train_set.weight }} –∫–≥
{% endif %}
{% endfor %}
{% endfor %}
{% else %}
<i>üö´ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—à–ª—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</i>
{% endif %}
'''),
    Column(Select(
        Jinja(
            "{% if item[2] is not none and item[3] is not none %}"
            "{{ item[0] }} | {{ item[2] }}x{{ item[3] }} –∫–≥"
            "{% else %}"
            "{{ item[0] }}"
            "{% endif %}"
        ),
        id='s_sets',
        item_id_getter=operator.itemgetter(1),
        items='sets',
        on_click=on_exercise_sets_selected,
    )),
    Button(Const('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥'), id='add_set', on_click=on_button_selected),
    Button(text=Const('–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥'),
           id='delete_set',
           on_click=on_button_selected,
           when=F['dialog_data']['exercise_sets']),
    Back(text=Const('–ù–∞–∑–∞–¥')),
    parse_mode='HTML',
    state=states.Trains.SETS,
    getter=exercise_set_getter
)

window_exercise_set_reps_input = Window(
    Format('üèãÔ∏è –¢–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n{exercise_name}\n'),
    Const('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:'),
    MessageInput(count_reps_set, content_types=[ContentType.TEXT], filter=F.text.isdigit()),
    MessageInput(other_type_handler),
    Back(text=Const('–ù–∞–∑–∞–¥')),
    getter=exercise_name_getter,
    state=states.Trains.RECORD_SET
)

window_exercise_set_weight_input = Window(
    Format('üèãÔ∏è –¢–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n{exercise_name}\n'
           '‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ:'),
    MessageInput(count_weight_set, content_types=[ContentType.TEXT], filter=F.text.isdigit()),
    MessageInput(other_type_handler),
    Back(text=Const('–ù–∞–∑–∞–¥')),
    getter=exercise_name_getter,
    state=states.Trains.RECORD_WEIGHT
)

trains_dialog = Dialog(
    window_type_select,
    window_exercise_select,
    window_exercise_set_select,
    window_exercise_set_reps_input,
    window_exercise_set_weight_input
)
